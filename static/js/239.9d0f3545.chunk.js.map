{"version":3,"sources":["../node_modules/prismjs/components/prism-lisp.js"],"names":["Prism","simple_form","name","RegExp","primitive","pattern","symbol","par","endpar","language","heading","alias","comment","string","greedy","inside","argument","splice","keyword","lookbehind","declare","interactive","boolean","number","defvar","variable","defun","arguments","function","punctuation","lambda","car","arg","rest","varform","forms","arglist","keys","util","clone","sublist","languages","lisp","elisp","emacs"],"mappings":"kGAAC,SAAUA,GAIV,SAASC,EAAYC,GACpB,OAAOC,OAAO,QAAUD,EAAO,gBAGhC,SAASE,EAAUC,GAClB,OAAOF,OAAO,YAAcE,EAAU,cAOvC,IAAIC,EAAS,yBAITC,EAAM,QACNC,EAAS,UAITC,EAAW,CAGdC,QAAS,CACRL,QAAS,QACTM,MAAO,CAAC,UAAW,UAEpBC,QAAS,MACTC,OAAQ,CACPR,QAAS,oBACTS,QAAQ,EACRC,OAAQ,CACPC,SAAU,oBACVV,OAAQH,OAAO,IAAMG,EAAS,OAGhC,gBAAiB,CAChBD,QAASF,OAAO,MAAQG,GACxBK,MAAO,CAAC,WAAY,WAErB,gBAAiB,CAChBN,QAASF,OAAO,IAAMG,GACtBK,MAAO,YAERM,OAAQ,CACPZ,QAASF,OAAO,MAAQG,GACxBK,MAAO,CAAC,SAAU,aAEnBO,QAAS,CACR,CACCb,QAASF,OACRI,2JAIDY,YAAY,GAEb,CACCd,QAASF,OACRI,qEAEDY,YAAY,IAGdC,QAAS,CACRf,QAASJ,EAAY,WACrBkB,YAAY,EACZR,MAAO,WAERU,YAAa,CACZhB,QAASJ,EAAY,eACrBkB,YAAY,EACZR,MAAO,WAERW,QAAS,CACRjB,QAASD,EAAU,aACnBe,YAAY,GAEbI,OAAQ,CACPlB,QAASD,EAAU,yBACnBe,YAAY,GAEbK,OAAQ,CACPnB,QAASF,OAAOI,yCAA4CD,GAC5Da,YAAY,EACZJ,OAAQ,CACPG,QAAS,aACTO,SAAUtB,OAAOG,KAGnBoB,MAAO,CACNrB,QAASF,OACRI,0CAECD,EACA,wBAEFa,YAAY,EACZJ,OAAQ,CACPG,QAAS,kBAGTS,UAAW,KACXC,SAAU,CACTvB,QAASF,OAAO,SAAWG,GAC3Ba,YAAY,GAEbU,YAAa,SAGfC,OAAQ,CACPzB,QAASF,OAAOI,0BAA6BD,EAAS,aACtDa,YAAY,EACZJ,OAAQ,CACPG,QAAS,UAGTS,UAAW,KACXE,YAAa,SAGfE,IAAK,CACJ1B,QAASF,OAAOI,EAAMD,GACtBa,YAAY,GAEbU,YAAa,CAEZ,uBAEA,CACCxB,QAAS,eACTc,YAAY,KAKXa,EAAM,CACT,cAAe7B,OA5HH,2BA6HZ8B,KAAM,CACLjB,SAAU,CACTX,QAASF,OAAOG,GAChBK,MAAO,YAERuB,QAAS,CACR7B,QAASF,OAAOI,EAAMD,EAAS,mBAAqBE,GACpDW,YAAY,EACZJ,OAAQ,CACPF,OAAQJ,EAASI,OACjBS,QAASb,EAASa,QAClBC,OAAQd,EAASc,OACjBjB,OAAQG,EAASH,OACjBuB,YAAa,WAMbM,EAAQ,oBAERC,EAAU,CACb/B,QAASF,OAAOI,yBAChBY,YAAY,EACZJ,OAAQ,CACP,YAAa,CACZV,QAASF,OAAO,qBAAuBgC,GACvCpB,OAAQiB,GAET,oBAAqB,CACpB3B,QAASF,OAAO,wBAA0BgC,GAC1CpB,OAAQiB,GAETK,KAAM,CACLhC,QAASF,OAAO,WAAagC,EAAQ,8BACrCpB,OAAQiB,GAEThB,SAAU,CACTX,QAASF,OAAOG,GAChBK,MAAO,YAERkB,YAAa,SAIfpB,EAAQ,OAAWM,OAAOY,UAAYS,EACtC3B,EAAQ,MAAUM,OAAOY,UAAY3B,EAAMsC,KAAKC,MAAMH,GACtD3B,EAAQ,MAAUM,OAAOY,UAAUZ,OAAOyB,QAAUJ,EAEpDpC,EAAMyC,UAAUC,KAAOjC,EACvBT,EAAMyC,UAAUE,MAAQlC,EACxBT,EAAMyC,UAAUG,MAAQnC,EACxBT,EAAMyC,UAAU,cAAgBhC,EAnMhC,CAoMCT","file":"static/js/239.9d0f3545.chunk.js","sourcesContent":["(function (Prism) {\n\t// Functions to construct regular expressions\n\t// simple form\n\t// e.g. (interactive ... or (interactive)\n\tfunction simple_form(name) {\n\t\treturn RegExp('(\\\\()' + name + '(?=[\\\\s\\\\)])');\n\t}\n\t// booleans and numbers\n\tfunction primitive(pattern) {\n\t\treturn RegExp('([\\\\s([])' + pattern + '(?=[\\\\s)])');\n\t}\n\n\t// Patterns in regular expressions\n\n\t// Symbol name. See https://www.gnu.org/software/emacs/manual/html_node/elisp/Symbol-Type.html\n\t// & and : are excluded as they are usually used for special purposes\n\tvar symbol = '[-+*/_~!@$%^=<>{}\\\\w]+';\n\t// symbol starting with & used in function arguments\n\tvar marker = '&' + symbol;\n\t// Open parenthesis for look-behind\n\tvar par = '(\\\\()';\n\tvar endpar = '(?=\\\\))';\n\t// End the pattern with look-ahead space\n\tvar space = '(?=\\\\s)';\n\n\tvar language = {\n\t\t// Three or four semicolons are considered a heading.\n\t\t// See https://www.gnu.org/software/emacs/manual/html_node/elisp/Comment-Tips.html\n\t\theading: {\n\t\t\tpattern: /;;;.*/,\n\t\t\talias: ['comment', 'title']\n\t\t},\n\t\tcomment: /;.*/,\n\t\tstring: {\n\t\t\tpattern: /\"(?:[^\"\\\\]|\\\\.)*\"/,\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\targument: /[-A-Z]+(?=[.,\\s])/,\n\t\t\t\tsymbol: RegExp('`' + symbol + \"'\")\n\t\t\t}\n\t\t},\n\t\t'quoted-symbol': {\n\t\t\tpattern: RegExp(\"#?'\" + symbol),\n\t\t\talias: ['variable', 'symbol']\n\t\t},\n\t\t'lisp-property': {\n\t\t\tpattern: RegExp(':' + symbol),\n\t\t\talias: 'property'\n\t\t},\n\t\tsplice: {\n\t\t\tpattern: RegExp(',@?' + symbol),\n\t\t\talias: ['symbol', 'variable']\n\t\t},\n\t\tkeyword: [\n\t\t\t{\n\t\t\t\tpattern: RegExp(\n\t\t\t\t\tpar +\n\t\t\t\t\t\t'(?:(?:lexical-)?let\\\\*?|(?:cl-)?letf|if|when|while|unless|cons|cl-loop|and|or|not|cond|setq|error|message|null|require|provide|use-package)' +\n\t\t\t\t\t\tspace\n\t\t\t\t),\n\t\t\t\tlookbehind: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tpattern: RegExp(\n\t\t\t\t\tpar + '(?:for|do|collect|return|finally|append|concat|in|by)' + space\n\t\t\t\t),\n\t\t\t\tlookbehind: true\n\t\t\t},\n\t\t],\n\t\tdeclare: {\n\t\t\tpattern: simple_form('declare'),\n\t\t\tlookbehind: true,\n\t\t\talias: 'keyword'\n\t\t},\n\t\tinteractive: {\n\t\t\tpattern: simple_form('interactive'),\n\t\t\tlookbehind: true,\n\t\t\talias: 'keyword'\n\t\t},\n\t\tboolean: {\n\t\t\tpattern: primitive('(?:t|nil)'),\n\t\t\tlookbehind: true\n\t\t},\n\t\tnumber: {\n\t\t\tpattern: primitive('[-+]?\\\\d+(?:\\\\.\\\\d*)?'),\n\t\t\tlookbehind: true\n\t\t},\n\t\tdefvar: {\n\t\t\tpattern: RegExp(par + 'def(?:var|const|custom|group)\\\\s+' + symbol),\n\t\t\tlookbehind: true,\n\t\t\tinside: {\n\t\t\t\tkeyword: /^def[a-z]+/,\n\t\t\t\tvariable: RegExp(symbol)\n\t\t\t}\n\t\t},\n\t\tdefun: {\n\t\t\tpattern: RegExp(\n\t\t\t\tpar +\n\t\t\t\t\t'(?:cl-)?(?:defun\\\\*?|defmacro)\\\\s+' +\n\t\t\t\t\tsymbol +\n\t\t\t\t\t'\\\\s+\\\\([\\\\s\\\\S]*?\\\\)'\n\t\t\t),\n\t\t\tlookbehind: true,\n\t\t\tinside: {\n\t\t\t\tkeyword: /^(?:cl-)?def\\S+/,\n\t\t\t\t// See below, this property needs to be defined later so that it can\n\t\t\t\t// reference the language object.\n\t\t\t\targuments: null,\n\t\t\t\tfunction: {\n\t\t\t\t\tpattern: RegExp('(^\\\\s)' + symbol),\n\t\t\t\t\tlookbehind: true\n\t\t\t\t},\n\t\t\t\tpunctuation: /[()]/\n\t\t\t}\n\t\t},\n\t\tlambda: {\n\t\t\tpattern: RegExp(par + 'lambda\\\\s+\\\\((?:&?' + symbol + '\\\\s*)*\\\\)'),\n\t\t\tlookbehind: true,\n\t\t\tinside: {\n\t\t\t\tkeyword: /^lambda/,\n\t\t\t\t// See below, this property needs to be defined later so that it can\n\t\t\t\t// reference the language object.\n\t\t\t\targuments: null,\n\t\t\t\tpunctuation: /[()]/\n\t\t\t}\n\t\t},\n\t\tcar: {\n\t\t\tpattern: RegExp(par + symbol),\n\t\t\tlookbehind: true\n\t\t},\n\t\tpunctuation: [\n\t\t\t// open paren, brackets, and close paren\n\t\t\t/(?:['`,]?\\(|[)\\[\\]])/,\n\t\t\t// cons\n\t\t\t{\n\t\t\t\tpattern: /(\\s)\\.(?=\\s)/,\n\t\t\t\tlookbehind: true\n\t\t\t},\n\t\t]\n\t};\n\n\tvar arg = {\n\t\t'lisp-marker': RegExp(marker),\n\t\trest: {\n\t\t\targument: {\n\t\t\t\tpattern: RegExp(symbol),\n\t\t\t\talias: 'variable'\n\t\t\t},\n\t\t\tvarform: {\n\t\t\t\tpattern: RegExp(par + symbol + '\\\\s+\\\\S[\\\\s\\\\S]*' + endpar),\n\t\t\t\tlookbehind: true,\n\t\t\t\tinside: {\n\t\t\t\t\tstring: language.string,\n\t\t\t\t\tboolean: language.boolean,\n\t\t\t\t\tnumber: language.number,\n\t\t\t\t\tsymbol: language.symbol,\n\t\t\t\t\tpunctuation: /[()]/\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tvar forms = '\\\\S+(?:\\\\s+\\\\S+)*';\n\n\tvar arglist = {\n\t\tpattern: RegExp(par + '[\\\\s\\\\S]*' + endpar),\n\t\tlookbehind: true,\n\t\tinside: {\n\t\t\t'rest-vars': {\n\t\t\t\tpattern: RegExp('&(?:rest|body)\\\\s+' + forms),\n\t\t\t\tinside: arg\n\t\t\t},\n\t\t\t'other-marker-vars': {\n\t\t\t\tpattern: RegExp('&(?:optional|aux)\\\\s+' + forms),\n\t\t\t\tinside: arg\n\t\t\t},\n\t\t\tkeys: {\n\t\t\t\tpattern: RegExp('&key\\\\s+' + forms + '(?:\\\\s+&allow-other-keys)?'),\n\t\t\t\tinside: arg\n\t\t\t},\n\t\t\targument: {\n\t\t\t\tpattern: RegExp(symbol),\n\t\t\t\talias: 'variable'\n\t\t\t},\n\t\t\tpunctuation: /[()]/\n\t\t}\n\t};\n\n\tlanguage['lambda'].inside.arguments = arglist;\n\tlanguage['defun'].inside.arguments = Prism.util.clone(arglist);\n\tlanguage['defun'].inside.arguments.inside.sublist = arglist;\n\n\tPrism.languages.lisp = language;\n\tPrism.languages.elisp = language;\n\tPrism.languages.emacs = language;\n\tPrism.languages['emacs-lisp'] = language;\n}(Prism));\n"],"sourceRoot":""}