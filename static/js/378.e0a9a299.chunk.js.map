{"version":3,"sources":["../node_modules/prismjs/components/prism-scss.js"],"names":["Prism","languages","scss","extend","pattern","lookbehind","inside","alias","insertBefore","rest"],"mappings":"iGAAAA,MAAMC,UAAUC,KAAOF,MAAMC,UAAUE,OAAO,MAAO,CACpD,QAAW,CACVC,QAAS,uCACTC,YAAY,GAEb,OAAU,CACTD,QAAS,0CACTE,OAAQ,CACP,KAAQ,YAKV,IAAO,0BAQP,SAAY,CAEXF,QAAS,iFACTE,OAAQ,CACP,OAAU,CACTF,QAAS,IACTG,MAAO,aAER,YAAe,UACf,SAAY,2BAGd,SAAY,CACXH,QAAS,4CACTE,OAAQ,CACP,SAAY,6BAKfN,MAAMC,UAAUO,aAAa,OAAQ,SAAU,CAC9C,QAAW,CACV,sGACA,CACCJ,QAAS,4BACTC,YAAY,MAKfL,MAAMC,UAAUO,aAAa,OAAQ,YAAa,CAEjD,SAAY,2BAGbR,MAAMC,UAAUO,aAAa,OAAQ,WAAY,CAChD,YAAe,CACdJ,QAAS,UACTG,MAAO,YAER,UAAa,CACZH,QAAS,6BACTG,MAAO,WAER,QAAW,qBACX,KAAQ,CACPH,QAAS,WACTG,MAAO,WAER,SAAY,CACXH,QAAS,kDACTC,YAAY,KAIdL,MAAMC,UAAUC,KAAhB,OAA+BI,OAAOG,KAAOT,MAAMC,UAAUC","file":"static/js/378.e0a9a299.chunk.js","sourcesContent":["Prism.languages.scss = Prism.languages.extend('css', {\n\t'comment': {\n\t\tpattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n\t\tlookbehind: true\n\t},\n\t'atrule': {\n\t\tpattern: /@[\\w-]+(?:\\([^()]+\\)|[^(])*?(?=\\s+[{;])/,\n\t\tinside: {\n\t\t\t'rule': /@[\\w-]+/\n\t\t\t// See rest below\n\t\t}\n\t},\n\t// url, compassified\n\t'url': /(?:[-a-z]+-)?url(?=\\()/i,\n\t// CSS selector regex is not appropriate for Sass\n\t// since there can be lot more things (var, @ directive, nesting..)\n\t// a selector must start at the end of a property or after a brace (end of other rules or nesting)\n\t// it can contain some characters that aren't used for defining rules or end of selector, & (parent selector), or interpolated variable\n\t// the end of a selector is found when there is no rules in it ( {} or {\\s}) or if there is a property (because an interpolated var\n\t// can \"pass\" as a selector- e.g: proper#{$erty})\n\t// this one was hard to do, so please be careful if you edit this one :)\n\t'selector': {\n\t\t// Initial look-ahead is used to prevent matching of blank selectors\n\t\tpattern: /(?=\\S)[^@;{}()]?(?:[^@;{}()]|#\\{\\$[-\\w]+\\})+(?=\\s*\\{(?:\\}|\\s|[^}]+[:{][^}]+))/m,\n\t\tinside: {\n\t\t\t'parent': {\n\t\t\t\tpattern: /&/,\n\t\t\t\talias: 'important'\n\t\t\t},\n\t\t\t'placeholder': /%[-\\w]+/,\n\t\t\t'variable': /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n\t\t}\n\t},\n\t'property': {\n\t\tpattern: /(?:[\\w-]|\\$[-\\w]+|#\\{\\$[-\\w]+\\})+(?=\\s*:)/,\n\t\tinside: {\n\t\t\t'variable': /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n\t\t}\n\t}\n});\n\nPrism.languages.insertBefore('scss', 'atrule', {\n\t'keyword': [\n\t\t/@(?:if|else(?: if)?|for|each|while|import|extend|debug|warn|mixin|include|function|return|content)/i,\n\t\t{\n\t\t\tpattern: /( +)(?:from|through)(?= )/,\n\t\t\tlookbehind: true\n\t\t}\n\t]\n});\n\nPrism.languages.insertBefore('scss', 'important', {\n\t// var and interpolated vars\n\t'variable': /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n});\n\nPrism.languages.insertBefore('scss', 'function', {\n\t'placeholder': {\n\t\tpattern: /%[-\\w]+/,\n\t\talias: 'selector'\n\t},\n\t'statement': {\n\t\tpattern: /\\B!(?:default|optional)\\b/i,\n\t\talias: 'keyword'\n\t},\n\t'boolean': /\\b(?:true|false)\\b/,\n\t'null': {\n\t\tpattern: /\\bnull\\b/,\n\t\talias: 'keyword'\n\t},\n\t'operator': {\n\t\tpattern: /(\\s)(?:[-+*\\/%]|[=!]=|<=?|>=?|and|or|not)(?=\\s)/,\n\t\tlookbehind: true\n\t}\n});\n\nPrism.languages.scss['atrule'].inside.rest = Prism.languages.scss;\n"],"sourceRoot":""}