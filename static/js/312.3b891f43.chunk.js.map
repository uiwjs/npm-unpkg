{"version":3,"sources":["../node_modules/prismjs/components/prism-php.js"],"names":["Prism","languages","php","extend","pattern","alias","lookbehind","insertBefore","inside","punctuation","string_interpolation","greedy","hooks","add","env","test","code","buildPlaceholders","tokenizePlaceholders"],"mappings":"kGAYC,SAAUA,GACVA,EAAMC,UAAUC,IAAMF,EAAMC,UAAUE,OAAO,QAAS,CACrD,QAAW,6eACX,QAAW,CACVC,QAAS,sBACTC,MAAO,YAER,SAAY,CACX,uBACA,iBAED,QAAW,CACVD,QAAS,uCACTE,YAAY,KAIdN,EAAMC,UAAUM,aAAa,MAAO,SAAU,CAC7C,gBAAiB,CAChBH,QAAS,eACTE,YAAY,EACZD,MAAO,aAITL,EAAMC,UAAUM,aAAa,MAAO,UAAW,CAC9C,UAAa,CACZH,QAAS,6BACTC,MAAO,eAITL,EAAMC,UAAUM,aAAa,MAAO,UAAW,CAC9C,SAAY,sBACZ,QAAW,CACVH,QAAS,kCACTE,YAAY,EACZE,OAAQ,CACPC,YAAa,SAMhBT,EAAMC,UAAUM,aAAa,MAAO,WAAY,CAC/C,SAAY,CACXH,QAAS,YACTE,YAAY,KAId,IAAII,EAAuB,CAC1BN,QAAS,uFACTE,YAAY,EACZE,OAAQR,EAAMC,UAAUC,KAGzBF,EAAMC,UAAUM,aAAa,MAAO,SAAU,CAC7C,gBAAiB,CAChBH,QAAS,sCACTO,QAAQ,EACRN,MAAO,SACPG,OAAQ,CACP,UAAa,CACZJ,QAAS,2BACTC,MAAO,SACPG,OAAQ,CACP,YAAe,mBAKnB,iBAAkB,CACjBJ,QAAS,8EACTO,QAAQ,EACRN,MAAO,SACPG,OAAQ,CACP,UAAa,CACZJ,QAAS,yCACTC,MAAO,SACPG,OAAQ,CACP,YAAe,iBAGjB,cAAiBE,IAGnB,uBAAwB,CACvBN,QAAS,yBACTO,QAAQ,EACRN,MAAO,UAER,uBAAwB,CACvBD,QAAS,yBACTO,QAAQ,EACRN,MAAO,SACPG,OAAQ,CACP,cAAiBE,aAKbV,EAAMC,UAAUC,IAAhB,OAEPF,EAAMY,MAAMC,IAAI,mBAAmB,SAASC,GAC3C,GAAK,MAAMC,KAAKD,EAAIE,MAApB,CAKAhB,EAAMC,UAAU,qBAAqBgB,kBAAkBH,EAAK,MAD3C,sJAIlBd,EAAMY,MAAMC,IAAI,kBAAkB,SAASC,GAC1Cd,EAAMC,UAAU,qBAAqBiB,qBAAqBJ,EAAK,UAlHhE,CAqHCd","file":"static/js/312.3b891f43.chunk.js","sourcesContent":["/**\n * Original by Aaron Harun: http://aahacreative.com/2012/07/31/php-syntax-highlighting-prism/\n * Modified by Miles Johnson: http://milesj.me\n *\n * Supports the following:\n * \t\t- Extends clike syntax\n * \t\t- Support for PHP 5.3+ (namespaces, traits, generators, etc)\n * \t\t- Smarter constant and function matching\n *\n * Adds the following new token classes:\n * \t\tconstant, delimiter, variable, function, package\n */\n(function (Prism) {\n\tPrism.languages.php = Prism.languages.extend('clike', {\n\t\t'keyword': /\\b(?:__halt_compiler|abstract|and|array|as|break|callable|case|catch|class|clone|const|continue|declare|default|die|do|echo|else|elseif|empty|enddeclare|endfor|endforeach|endif|endswitch|endwhile|eval|exit|extends|final|finally|for|foreach|function|global|goto|if|implements|include|include_once|instanceof|insteadof|interface|isset|list|match|namespace|new|or|parent|print|private|protected|public|require|require_once|return|static|switch|throw|trait|try|unset|use|var|while|xor|yield)\\b/i,\n\t\t'boolean': {\n\t\t\tpattern: /\\b(?:false|true)\\b/i,\n\t\t\talias: 'constant'\n\t\t},\n\t\t'constant': [\n\t\t\t/\\b[A-Z_][A-Z0-9_]*\\b/,\n\t\t\t/\\b(?:null)\\b/i,\n\t\t],\n\t\t'comment': {\n\t\t\tpattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n\t\t\tlookbehind: true\n\t\t}\n\t});\n\n\tPrism.languages.insertBefore('php', 'string', {\n\t\t'shell-comment': {\n\t\t\tpattern: /(^|[^\\\\])#.*/,\n\t\t\tlookbehind: true,\n\t\t\talias: 'comment'\n\t\t}\n\t});\n\n\tPrism.languages.insertBefore('php', 'comment', {\n\t\t'delimiter': {\n\t\t\tpattern: /\\?>$|^<\\?(?:php(?=\\s)|=)?/i,\n\t\t\talias: 'important'\n\t\t}\n\t});\n\n\tPrism.languages.insertBefore('php', 'keyword', {\n\t\t'variable': /\\$+(?:\\w+\\b|(?={))/i,\n\t\t'package': {\n\t\t\tpattern: /(\\\\|namespace\\s+|use\\s+)[\\w\\\\]+/,\n\t\t\tlookbehind: true,\n\t\t\tinside: {\n\t\t\t\tpunctuation: /\\\\/\n\t\t\t}\n\t\t}\n\t});\n\n\t// Must be defined after the function pattern\n\tPrism.languages.insertBefore('php', 'operator', {\n\t\t'property': {\n\t\t\tpattern: /(->)[\\w]+/,\n\t\t\tlookbehind: true\n\t\t}\n\t});\n\n\tvar string_interpolation = {\n\t\tpattern: /{\\$(?:{(?:{[^{}]+}|[^{}]+)}|[^{}])+}|(^|[^\\\\{])\\$+(?:\\w+(?:\\[[^\\r\\n\\[\\]]+\\]|->\\w+)*)/,\n\t\tlookbehind: true,\n\t\tinside: Prism.languages.php\n\t};\n\n\tPrism.languages.insertBefore('php', 'string', {\n\t\t'nowdoc-string': {\n\t\t\tpattern: /<<<'([^']+)'[\\r\\n](?:.*[\\r\\n])*?\\1;/,\n\t\t\tgreedy: true,\n\t\t\talias: 'string',\n\t\t\tinside: {\n\t\t\t\t'delimiter': {\n\t\t\t\t\tpattern: /^<<<'[^']+'|[a-z_]\\w*;$/i,\n\t\t\t\t\talias: 'symbol',\n\t\t\t\t\tinside: {\n\t\t\t\t\t\t'punctuation': /^<<<'?|[';]$/\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t'heredoc-string': {\n\t\t\tpattern: /<<<(?:\"([^\"]+)\"[\\r\\n](?:.*[\\r\\n])*?\\1;|([a-z_]\\w*)[\\r\\n](?:.*[\\r\\n])*?\\2;)/i,\n\t\t\tgreedy: true,\n\t\t\talias: 'string',\n\t\t\tinside: {\n\t\t\t\t'delimiter': {\n\t\t\t\t\tpattern: /^<<<(?:\"[^\"]+\"|[a-z_]\\w*)|[a-z_]\\w*;$/i,\n\t\t\t\t\talias: 'symbol',\n\t\t\t\t\tinside: {\n\t\t\t\t\t\t'punctuation': /^<<<\"?|[\";]$/\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'interpolation': string_interpolation // See below\n\t\t\t}\n\t\t},\n\t\t'single-quoted-string': {\n\t\t\tpattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n\t\t\tgreedy: true,\n\t\t\talias: 'string'\n\t\t},\n\t\t'double-quoted-string': {\n\t\t\tpattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n\t\t\tgreedy: true,\n\t\t\talias: 'string',\n\t\t\tinside: {\n\t\t\t\t'interpolation': string_interpolation // See below\n\t\t\t}\n\t\t}\n\t});\n\t// The different types of PHP strings \"replace\" the C-like standard string\n\tdelete Prism.languages.php['string'];\n\n\tPrism.hooks.add('before-tokenize', function(env) {\n\t\tif (!/<\\?/.test(env.code)) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar phpPattern = /<\\?(?:[^\"'/#]|\\/(?![*/])|(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|(?:\\/\\/|#)(?:[^?\\n\\r]|\\?(?!>))*(?=$|\\?>|[\\r\\n])|\\/\\*[\\s\\S]*?(?:\\*\\/|$))*?(?:\\?>|$)/ig;\n\t\tPrism.languages['markup-templating'].buildPlaceholders(env, 'php', phpPattern);\n\t});\n\n\tPrism.hooks.add('after-tokenize', function(env) {\n\t\tPrism.languages['markup-templating'].tokenizePlaceholders(env, 'php');\n\t});\n\n}(Prism));\n"],"sourceRoot":""}