{"version":3,"sources":["../../src/index.tsx"],"names":["prefixCls","size","type","preIcon","addonAfter","inputRef","React","addonRef","useImperativeHandle","cls","props","useEffect","input","window","parseInt","computedInputPadding","Icon","verticalAlign","tagName","TagName","spin","renderSVGPaths","useMemo","svgPathsData","svg","fill","color","others","propps","className","disabled","active","loading","block","basic","htmlType","children","ref","icon","child"],"mappings":"qQAWe,oBACb,cACE,QACEA,iBADF,MAAM,UAAN,EAAM,EAAN,EAAM,YAAN,EAAM,MAAN,IAIEC,YAJF,MAAM,UAAN,MAKEC,YALF,MAAM,OAAN,MAMEC,eANF,MAAM,KAAN,EAOEC,EAPF,EAOEA,WAPF,WAUMC,EAAWC,WAAjB,MACMC,EAAWD,WAAjB,MACAE,8BAAmB,GAEjB,kBAAMH,EAFRG,WAIA,IAAMC,EAAM,KAGVR,EAAUD,EAAN,MAHM,KAIVI,EAAgBJ,EAAN,SAJA,KAKVU,sBALU,gCAAZ,OAuBE,OAZAC,OAAFA,YAAEA,EAAQ,YAIV,WACE,GAAIJ,WAAoBF,EAAxB,QAA0C,CACxC,IAAMO,EAAQC,QAAUA,wBAAwBN,EAAxBM,QAAxB,MACAR,6BACEE,sBADFF,EACiCS,SAASF,EAAD,MAARE,IADjCT,MANFU,MAYA,sBAAK,UAAL,EAAqB,MAArB,YACE,mBAAM,KAAMZ,IACZ,2BACE,IADF,EAEE,KAFF,EAGE,aAAa,OAHf,GAKE,UAAcH,EAAL,YAEVI,GACC,sBAAM,UAAcJ,EAApB,eAA6C,IAA7C,WACGI,W,80wVA1CPY,EAAO,gBAA4C,cACvD,IAAM,EAAN,EAAM,UAAN,IAEEhB,iBAFF,MAAM,SAAN,MAGEiB,qBAHF,MAAM,SAAN,MAIEC,QAASC,OAJX,MAAM,OAAN,EAAM,EAAN,EAAM,QAAN,EAAM,KAAN,IAOEC,YAPF,oBAWMC,EAAiBC,mBAAQ,WAC7B,UAGA,EAC8BC,IAA9B,IACO,KAAgB,qBAAU,sBAAc,EAAd,EAAoB,SAAS,WAA9D,MAJE,OAKD,CAPH,IASIC,EAAJ,KACE,GAAF,kBAAI,EACFA,EACE,qBAAK,KAAL,EAAkB,QAAlB,qBACGH,QAGA,KAAIf,mBAAJ,GAKL,YAJAkB,EAAM,mBAA0D,CAC9DC,KAAMC,IAKRC,EAAFA,WAAiBF,KAAM,gBAAmBE,EAA1CA,OACE,IAAIC,EAAM,UAEVC,UAAW,KAGT7B,KAAgCA,EAAhCA,MAHS,KAIToB,KAAuBpB,EAAvBoB,QAJS,yCAUX,OAAK,mCAAsBI,QAG/B,O,mOA7Ce,oBACb,cACE,QACExB,iBADF,MAAM,QAAN,MAEE8B,gBAFF,aAGEC,cAHF,aAIEC,eAJF,aAKEC,aALF,aAMEC,aANF,aAOEC,gBAPF,MAAM,SAAN,MAQEjC,YARF,MAAM,QAAN,MASED,YATF,MAAM,UAAN,EAAM,EAAN,EAAM,OAAN,EAAM,UAYJmC,EAZF,EAYEA,SAZF,WAeM3B,EAAM,CAAC,EAAD,EAGVR,EAAUD,EAAN,WAHM,KAIVE,EAAUF,EAAN,MAJM,KAKVkC,EAAWlC,EAAN,SALK,KAMVgC,EAAahC,EAAN,WANG,KAOV8B,gBAPU,KAQVC,EAAS,SARC,KASVE,EAAQ,QATE,gCAAZ,OAeA,OACE,kCAEEI,IAFF,EAGEnC,KAHF,EAIE4B,SAAUA,GAJZ,EAKED,UALF,YAOGS,GAAQ,mBAAMpC,KAAMoC,IACpBF,GACC,oBAA8BG,YAC5B,SACIjC,mBAAJ,GAAwCiC,EACjC,+BAAOA,IAFKA","file":"static/js/0.cbd6b926.chunk.js","sourcesContent":["import React from 'react';\nimport Icon from '@uiw/react-icon';\nimport { IProps, HTMLButtonProps } from '@uiw/utils';\nimport './style/index.less';\n\nexport type ButtonType =\n  | 'primary'\n  | 'success'\n  | 'warning'\n  | 'danger'\n  | 'light'\n  | 'dark'\n  | 'link';\nexport type ButtonSize = 'large' | 'default' | 'small';\n\nexport interface ButtonProps extends IProps, Omit<HTMLButtonProps, 'size'> {\n  basic?: boolean;\n  disabled?: boolean;\n  active?: boolean;\n  loading?: boolean;\n  block?: boolean;\n  icon?: JSX.Element | string | false | null;\n  type?: ButtonType;\n  size?: ButtonSize;\n  htmlType?: 'button' | 'submit' | 'reset';\n  onClick?: (e: React.MouseEvent<HTMLButtonElement> & MouseEvent) => void;\n}\n\nexport default React.forwardRef<HTMLButtonElement, ButtonProps>(\n  (props, ref) => {\n    const {\n      prefixCls = 'w-btn',\n      disabled = false,\n      active = false,\n      loading = false,\n      block = false,\n      basic = false,\n      htmlType = 'button',\n      type = 'light',\n      size = 'default',\n      icon,\n      className,\n      children,\n      ...others\n    } = props;\n    const cls = [\n      className,\n      prefixCls,\n      size ? `${prefixCls}-size-${size}` : null,\n      type ? `${prefixCls}-${type}` : null,\n      basic ? `${prefixCls}-basic` : null,\n      loading ? `${prefixCls}-loading` : null,\n      disabled || loading ? 'disabled' : null,\n      active ? 'active' : null,\n      block ? 'block' : null,\n    ]\n      .filter(Boolean)\n      .join(' ')\n      .trim();\n\n    return (\n      <button\n        {...others}\n        ref={ref}\n        type={htmlType}\n        disabled={disabled || loading}\n        className={cls}\n      >\n        {icon && <Icon type={icon} />}\n        {children &&\n          React.Children.map(children, (child: React.ReactNode) => {\n            if (!child) return child;\n            if (React.isValidElement(child)) return child;\n            return <span>{child}</span>;\n          })}\n      </button>\n    );\n  },\n);\n"],"sourceRoot":""}