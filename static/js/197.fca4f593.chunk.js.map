{"version":3,"sources":["../node_modules/prismjs/components/prism-javadoclike.js"],"names":["Prism","javaDocLike","languages","javadoclike","pattern","lookbehind","Object","defineProperty","value","docLanguage","forEach","lang","callback","tokenName","grammar","token","definition","alias","insertBefore","RegExp","Array","isArray","i","l","length","docCommentSupport","inside","rest","addSupport"],"mappings":"kGAAC,SAAUA,GAEV,IAAIC,EAAcD,EAAME,UAAUC,YAAc,CAC/C,UAAa,CACZC,QAAS,8DACTC,YAAY,GAEb,QAAW,CAGVD,QAAS,qDACTC,YAAY,GAEb,YAAe,QAqEhBC,OAAOC,eAAeN,EAAa,aAAc,CAAEO,MAfnD,SAAoBN,EAAWO,GACL,kBAAdP,IACVA,EAAY,CAACA,IAGdA,EAAUQ,SAAQ,SAAUC,IAjD7B,SAA2BA,EAAMC,GAChC,IAAIC,EAAY,cAEZC,EAAUd,EAAME,UAAUS,GAC9B,GAAKG,EAAL,CAGA,IAAIC,EAAQD,EAAQD,GAEpB,IAAKE,EAAO,CAEX,IAAIC,EAAa,CACjBA,cAAwB,CACvBZ,QAAS,wCACTC,YAAY,EACZY,MAAO,YAIRF,GADAD,EAAUd,EAAME,UAAUgB,aAAaP,EAAM,UAAWK,IACxCH,GAOjB,GAJIE,aAAiBI,SACpBJ,EAAQD,EAAQD,GAAa,CAAET,QAASW,IAGrCK,MAAMC,QAAQN,GACjB,IAAK,IAAIO,EAAI,EAAGC,EAAIR,EAAMS,OAAQF,EAAIC,EAAGD,IACpCP,EAAMO,aAAcH,SACvBJ,EAAMO,GAAK,CAAElB,QAASW,EAAMO,KAE7BV,EAASG,EAAMO,SAGhBV,EAASG,IAgBTU,CAAkBd,GAAM,SAAUP,GAC5BA,EAAQsB,SACZtB,EAAQsB,OAAS,IAElBtB,EAAQsB,OAAOC,KAAOlB,WAOzBR,EAAY2B,WAAW,CAAC,OAAQ,aAAc,OAAQ3B,GApFtD,CAsFCD","file":"static/js/197.fca4f593.chunk.js","sourcesContent":["(function (Prism) {\n\n\tvar javaDocLike = Prism.languages.javadoclike = {\n\t\t'parameter': {\n\t\t\tpattern: /(^\\s*(?:\\/{3}|\\*|\\/\\*\\*)\\s*@(?:param|arg|arguments)\\s+)\\w+/m,\n\t\t\tlookbehind: true\n\t\t},\n\t\t'keyword': {\n\t\t\t// keywords are the first word in a line preceded be an `@` or surrounded by curly braces.\n\t\t\t// @word, {@word}\n\t\t\tpattern: /(^\\s*(?:\\/{3}|\\*|\\/\\*\\*)\\s*|\\{)@[a-z][a-zA-Z-]+\\b/m,\n\t\t\tlookbehind: true\n\t\t},\n\t\t'punctuation': /[{}]/\n\t};\n\n\n\t/**\n\t * Adds doc comment support to the given language and calls a given callback on each doc comment pattern.\n\t *\n\t * @param {string} lang the language add doc comment support to.\n\t * @param {(pattern: {inside: {rest: undefined}}) => void} callback the function called with each doc comment pattern as argument.\n\t */\n\tfunction docCommentSupport(lang, callback) {\n\t\tvar tokenName = 'doc-comment';\n\n\t\tvar grammar = Prism.languages[lang];\n\t\tif (!grammar) {\n\t\t\treturn;\n\t\t}\n\t\tvar token = grammar[tokenName];\n\n\t\tif (!token) {\n\t\t\t// add doc comment: /** */\n\t\t\tvar definition = {};\n\t\t\tdefinition[tokenName] = {\n\t\t\t\tpattern: /(^|[^\\\\])\\/\\*\\*[^/][\\s\\S]*?(?:\\*\\/|$)/,\n\t\t\t\tlookbehind: true,\n\t\t\t\talias: 'comment'\n\t\t\t};\n\n\t\t\tgrammar = Prism.languages.insertBefore(lang, 'comment', definition);\n\t\t\ttoken = grammar[tokenName];\n\t\t}\n\n\t\tif (token instanceof RegExp) { // convert regex to object\n\t\t\ttoken = grammar[tokenName] = { pattern: token };\n\t\t}\n\n\t\tif (Array.isArray(token)) {\n\t\t\tfor (var i = 0, l = token.length; i < l; i++) {\n\t\t\t\tif (token[i] instanceof RegExp) {\n\t\t\t\t\ttoken[i] = { pattern: token[i] };\n\t\t\t\t}\n\t\t\t\tcallback(token[i]);\n\t\t\t}\n\t\t} else {\n\t\t\tcallback(token);\n\t\t}\n\t}\n\n\t/**\n\t * Adds doc-comment support to the given languages for the given documentation language.\n\t *\n\t * @param {string[]|string} languages\n\t * @param {Object} docLanguage\n\t */\n\tfunction addSupport(languages, docLanguage) {\n\t\tif (typeof languages === 'string') {\n\t\t\tlanguages = [languages];\n\t\t}\n\n\t\tlanguages.forEach(function (lang) {\n\t\t\tdocCommentSupport(lang, function (pattern) {\n\t\t\t\tif (!pattern.inside) {\n\t\t\t\t\tpattern.inside = {};\n\t\t\t\t}\n\t\t\t\tpattern.inside.rest = docLanguage;\n\t\t\t});\n\t\t});\n\t}\n\n\tObject.defineProperty(javaDocLike, 'addSupport', { value: addSupport });\n\n\tjavaDocLike.addSupport(['java', 'javascript', 'php'], javaDocLike);\n\n}(Prism));\n"],"sourceRoot":""}