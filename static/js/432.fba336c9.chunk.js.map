{"version":3,"sources":["../node_modules/prismjs/components/prism-typescript.js"],"names":["Prism","languages","typescript","extend","pattern","lookbehind","greedy","inside","typeInside","insertBefore","alias","ts"],"mappings":"kGAAC,SAAUA,GAEVA,EAAMC,UAAUC,WAAaF,EAAMC,UAAUE,OAAO,aAAc,CACjE,aAAc,CACbC,QAAS,+JACTC,YAAY,EACZC,QAAQ,EACRC,OAAQ,MAGT,QAAW,6ZACX,QAAW,iGAILP,EAAMC,UAAUC,WAAhB,UAGP,IAAIM,EAAaR,EAAMC,UAAUE,OAAO,aAAc,WAC/CK,EAAW,cAElBR,EAAMC,UAAUC,WAAW,cAAcK,OAASC,EAElDR,EAAMC,UAAUQ,aAAa,aAAc,WAAY,CACtD,mBAAoB,CAEnBL,QAAS,yFACTE,QAAQ,EACRC,OAAQ,CACP,SAAY,4CACZ,QAAW,CACVH,QAAS,WACTM,MAAO,aACPH,OAAQC,OAMZR,EAAMC,UAAUU,GAAKX,EAAMC,UAAUC,WAvCrC,CAyCCF","file":"static/js/432.fba336c9.chunk.js","sourcesContent":["(function (Prism) {\n\n\tPrism.languages.typescript = Prism.languages.extend('javascript', {\n\t\t'class-name': {\n\t\t\tpattern: /(\\b(?:class|extends|implements|instanceof|interface|new|type)\\s+)(?!keyof\\b)[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?:\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/,\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true,\n\t\t\tinside: null // see below\n\t\t},\n\t\t// From JavaScript Prism keyword list and TypeScript language spec: https://github.com/Microsoft/TypeScript/blob/master/doc/spec.md#221-reserved-words\n\t\t'keyword': /\\b(?:abstract|as|asserts|async|await|break|case|catch|class|const|constructor|continue|debugger|declare|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|is|keyof|let|module|namespace|new|null|of|package|private|protected|public|readonly|return|require|set|static|super|switch|this|throw|try|type|typeof|undefined|var|void|while|with|yield)\\b/,\n\t\t'builtin': /\\b(?:string|Function|any|number|boolean|Array|symbol|console|Promise|unknown|never)\\b/,\n\t});\n\n\t// doesn't work with TS because TS is too complex\n\tdelete Prism.languages.typescript['parameter'];\n\n\t// a version of typescript specifically for highlighting types\n\tvar typeInside = Prism.languages.extend('typescript', {});\n\tdelete typeInside['class-name'];\n\n\tPrism.languages.typescript['class-name'].inside = typeInside;\n\n\tPrism.languages.insertBefore('typescript', 'function', {\n\t\t'generic-function': {\n\t\t\t// e.g. foo<T extends \"bar\" | \"baz\">( ...\n\t\t\tpattern: /#?[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\\s*\\()/,\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'function': /^#?[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*/,\n\t\t\t\t'generic': {\n\t\t\t\t\tpattern: /<[\\s\\S]+/, // everything after the first <\n\t\t\t\t\talias: 'class-name',\n\t\t\t\t\tinside: typeInside\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\tPrism.languages.ts = Prism.languages.typescript;\n\n}(Prism));\n"],"sourceRoot":""}