{"version":3,"sources":["../node_modules/prismjs/components/prism-ftl.js"],"names":["Prism","FTL_EXPR","source","i","replace","ftl","pattern","greedy","RegExp","inside","lookbehind","alias","rest","string","interpolation","languages","hooks","add","env","buildPlaceholders","tokenizePlaceholders"],"mappings":"kGAAC,SAAUA,GAMV,IADA,IAAIC,EAAW,iGAAiGC,OACvGC,EAAI,EAAGA,EAAI,EAAGA,IACtBF,EAAWA,EAASG,QAAQ,WAAW,WAAc,OAAOH,KAE7DA,EAAWA,EAASG,QAAQ,UAAW,UAAUF,QAEjD,IAAIG,EAAM,CACT,QAAW,kBACX,OAAU,CACT,CAECC,QAAS,iCACTC,QAAQ,GAET,CACCD,QAASE,OAAO,sDAAsDN,OAAOE,QAAQ,WAAW,WAAc,OAAOH,MACrHM,QAAQ,EACRE,OAAQ,CACP,cAAiB,CAChBH,QAASE,OAAO,2CAA2CN,OAAOE,QAAQ,WAAW,WAAc,OAAOH,MAC1GS,YAAY,EACZD,OAAQ,CACP,4BAA6B,CAC5BH,QAAS,YACTK,MAAO,eAERC,KAAM,UAMX,QAAW,aACX,QAAW,qBACX,mBAAoB,CACnBN,QAAS,uBACTI,YAAY,EACZC,MAAO,YAER,SAAY,eACZ,OAAU,gBACV,SAAY,4EACZ,YAAe,iBAGhBN,EAAIQ,OAAO,GAAGJ,OAAOK,cAAcL,OAAOG,KAAOP,EAEjDL,EAAMe,UAAUV,IAAM,CACrB,cAAe,CAEdC,QAAS,eACTK,MAAO,WAER,gBAAiB,CAChBL,QAAS,cACTG,OAAQ,CACP,UAAa,CACZH,QAAS,uBACTI,YAAY,EACZC,MAAO,WAER,YAAe,cACf,QAAW,CACVL,QAAS,mBACTK,MAAO,MACPF,OAAQJ,KAIX,oBAAqB,CACpBC,QAAS,kBACTG,OAAQ,CACP,YAAe,YACf,QAAW,CACVH,QAAS,mBACTK,MAAO,MACPF,OAAQJ,MAMZL,EAAMgB,MAAMC,IAAI,mBAAmB,SAAUC,GAC5C,IAAIZ,EAAUE,OAAO,mEAAmEN,OAAOE,QAAQ,WAAW,WAAc,OAAOH,KAAc,MACrJD,EAAMe,UAAU,qBAAqBI,kBAAkBD,EAAK,MAAOZ,MAGpEN,EAAMgB,MAAMC,IAAI,kBAAkB,SAAUC,GAC3ClB,EAAMe,UAAU,qBAAqBK,qBAAqBF,EAAK,UA7FhE,CAgGClB","file":"static/js/137.f1914bfb.chunk.js","sourcesContent":["(function (Prism) {\n\n\t// https://freemarker.apache.org/docs/dgui_template_exp.html\n\n\t// FTL expression with 4 levels of nesting supported\n\tvar FTL_EXPR = /[^<()\"']|\\((?:<expr>)*\\)|<(?!#--)|<#--(?:[^-]|-(?!->))*-->|\"(?:[^\\\\\"]|\\\\.)*\"|'(?:[^\\\\']|\\\\.)*'/.source;\n\tfor (var i = 0; i < 2; i++) {\n\t\tFTL_EXPR = FTL_EXPR.replace(/<expr>/g, function () { return FTL_EXPR; });\n\t}\n\tFTL_EXPR = FTL_EXPR.replace(/<expr>/g, /[^\\s\\S]/.source);\n\n\tvar ftl = {\n\t\t'comment': /<#--[\\s\\S]*?-->/,\n\t\t'string': [\n\t\t\t{\n\t\t\t\t// raw string\n\t\t\t\tpattern: /\\br(\"|')(?:(?!\\1)[^\\\\]|\\\\.)*\\1/,\n\t\t\t\tgreedy: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tpattern: RegExp(/(\"|')(?:(?!\\1|\\$\\{)[^\\\\]|\\\\.|\\$\\{(?:<expr>)*?\\})*\\1/.source.replace(/<expr>/g, function () { return FTL_EXPR; })),\n\t\t\t\tgreedy: true,\n\t\t\t\tinside: {\n\t\t\t\t\t'interpolation': {\n\t\t\t\t\t\tpattern: RegExp(/((?:^|[^\\\\])(?:\\\\\\\\)*)\\$\\{(?:<expr>)*?\\}/.source.replace(/<expr>/g, function () { return FTL_EXPR; })),\n\t\t\t\t\t\tlookbehind: true,\n\t\t\t\t\t\tinside: {\n\t\t\t\t\t\t\t'interpolation-punctuation': {\n\t\t\t\t\t\t\t\tpattern: /^\\$\\{|\\}$/,\n\t\t\t\t\t\t\t\talias: 'punctuation'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\trest: null\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t],\n\t\t'keyword': /\\b(?:as)\\b/,\n\t\t'boolean': /\\b(?:true|false)\\b/,\n\t\t'builtin-function': {\n\t\t\tpattern: /((?:^|[^?])\\?\\s*)\\w+/,\n\t\t\tlookbehind: true,\n\t\t\talias: 'function'\n\t\t},\n\t\t'function': /\\w+(?=\\s*\\()/,\n\t\t'number': /\\d+(?:\\.\\d+)?/,\n\t\t'operator': /\\.\\.[<*!]?|->|--|\\+\\+|&&|\\|\\||\\?{1,2}|[-+*/%!=<>]=?|\\b(?:gt|gte|lt|lte)\\b/,\n\t\t'punctuation': /[,;.:()[\\]{}]/\n\t};\n\n\tftl.string[1].inside.interpolation.inside.rest = ftl;\n\n\tPrism.languages.ftl = {\n\t\t'ftl-comment': {\n\t\t\t// the pattern is shortened to be more efficient\n\t\t\tpattern: /^<#--[\\s\\S]*/,\n\t\t\talias: 'comment'\n\t\t},\n\t\t'ftl-directive': {\n\t\t\tpattern: /^<[\\s\\S]+>$/,\n\t\t\tinside: {\n\t\t\t\t'directive': {\n\t\t\t\t\tpattern: /(^<\\/?)[#@][a-z]\\w*/i,\n\t\t\t\t\tlookbehind: true,\n\t\t\t\t\talias: 'keyword'\n\t\t\t\t},\n\t\t\t\t'punctuation': /^<\\/?|\\/?>$/,\n\t\t\t\t'content': {\n\t\t\t\t\tpattern: /[\\s\\S]*\\S[\\s\\S]*/,\n\t\t\t\t\talias: 'ftl',\n\t\t\t\t\tinside: ftl\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t'ftl-interpolation': {\n\t\t\tpattern: /^\\$\\{[\\s\\S]*\\}$/,\n\t\t\tinside: {\n\t\t\t\t'punctuation': /^\\$\\{|\\}$/,\n\t\t\t\t'content': {\n\t\t\t\t\tpattern: /[\\s\\S]*\\S[\\s\\S]*/,\n\t\t\t\t\talias: 'ftl',\n\t\t\t\t\tinside: ftl\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tPrism.hooks.add('before-tokenize', function (env) {\n\t\tvar pattern = RegExp(/<#--[\\s\\S]*?-->|<\\/?[#@][a-zA-Z](?:<expr>)*?>|\\$\\{(?:<expr>)*?\\}/.source.replace(/<expr>/g, function () { return FTL_EXPR; }), 'gi');\n\t\tPrism.languages['markup-templating'].buildPlaceholders(env, 'ftl', pattern);\n\t});\n\n\tPrism.hooks.add('after-tokenize', function (env) {\n\t\tPrism.languages['markup-templating'].tokenizePlaceholders(env, 'ftl');\n\t});\n\n}(Prism));\n"],"sourceRoot":""}