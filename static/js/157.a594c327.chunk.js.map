{"version":3,"sources":["../node_modules/prismjs/components/prism-groovy.js"],"names":["Prism","languages","groovy","extend","pattern","greedy","lookbehind","insertBefore","alias","hooks","add","env","language","type","delimiter","content","replace","highlight","inside","classes","push"],"mappings":"iGAAAA,MAAMC,UAAUC,OAASF,MAAMC,UAAUE,OAAO,QAAS,CACxD,OAAU,CACT,CAECC,QAAS,kFACTC,QAAQ,GAET,CAGCD,QAAS,oCACTC,QAAQ,IAGV,QAAW,6WACX,OAAU,+FACV,SAAY,CACXD,QAAS,oJACTE,YAAY,GAEb,YAAe,sBAGhBN,MAAMC,UAAUM,aAAa,SAAU,SAAU,CAChD,QAAW,CACVH,QAAS,OACTI,MAAO,aAITR,MAAMC,UAAUM,aAAa,SAAU,cAAe,CACrD,cAAe,0DAGhBP,MAAMC,UAAUM,aAAa,SAAU,WAAY,CAClD,WAAc,CACbH,QAAS,eACTE,YAAY,EACZE,MAAO,iBAKTR,MAAMS,MAAMC,IAAI,QAAQ,SAASC,GAChC,GAAqB,WAAjBA,EAAIC,UAAsC,WAAbD,EAAIE,KAAmB,CACvD,IAAIC,EAAYH,EAAII,QAAQ,GAE5B,GAAiB,KAAbD,EAAkB,CACrB,IAAIV,EAAU,kCACI,MAAdU,IACHV,EAAU,mCAIXO,EAAII,QAAUJ,EAAII,QAAQC,QAAQ,QAAS,KAAKA,QAAQ,SAAU,KAElEL,EAAII,QAAUf,MAAMiB,UAAUN,EAAII,QAAS,CAC1C,WAAc,CACbX,QAASA,EACTE,YAAY,EACZY,OAAQlB,MAAMC,UAAUC,UAI1BS,EAAIQ,QAAQC,KAAmB,MAAdN,EAAoB,QAAU","file":"static/js/157.a594c327.chunk.js","sourcesContent":["Prism.languages.groovy = Prism.languages.extend('clike', {\n\t'string': [\n\t\t{\n\t\t\t// https://groovy-lang.org/syntax.html#_dollar_slashy_string\n\t\t\tpattern: /(\"\"\"|''')(?:[^\\\\]|\\\\[\\s\\S])*?\\1|\\$\\/(?:[^/$]|\\$(?:[/$]|(?![/$]))|\\/(?!\\$))*\\/\\$/,\n\t\t\tgreedy: true\n\t\t},\n\t\t{\n\t\t\t// TODO: Slash strings (e.g. /foo/) can contain line breaks but this will cause a lot of trouble with\n\t\t\t// simple division (see JS regex), so find a fix maybe?\n\t\t\tpattern: /([\"'/])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n\t\t\tgreedy: true\n\t\t}\n\t],\n\t'keyword': /\\b(?:as|def|in|abstract|assert|boolean|break|byte|case|catch|char|class|const|continue|default|do|double|else|enum|extends|final|finally|float|for|goto|if|implements|import|instanceof|int|interface|long|native|new|package|private|protected|public|return|short|static|strictfp|super|switch|synchronized|this|throw|throws|trait|transient|try|void|volatile|while)\\b/,\n\t'number': /\\b(?:0b[01_]+|0x[\\da-f_]+(?:\\.[\\da-f_p\\-]+)?|[\\d_]+(?:\\.[\\d_]+)?(?:e[+-]?[\\d]+)?)[glidf]?\\b/i,\n\t'operator': {\n\t\tpattern: /(^|[^.])(?:~|==?~?|\\?[.:]?|\\*(?:[.=]|\\*=?)?|\\.[@&]|\\.\\.<|\\.\\.(?!\\.)|-[-=>]?|\\+[+=]?|!=?|<(?:<=?|=>?)?|>(?:>>?=?|=)?|&[&=]?|\\|[|=]?|\\/=?|\\^=?|%=?)/,\n\t\tlookbehind: true\n\t},\n\t'punctuation': /\\.+|[{}[\\];(),:$]/\n});\n\nPrism.languages.insertBefore('groovy', 'string', {\n\t'shebang': {\n\t\tpattern: /#!.+/,\n\t\talias: 'comment'\n\t}\n});\n\nPrism.languages.insertBefore('groovy', 'punctuation', {\n\t'spock-block': /\\b(?:setup|given|when|then|and|cleanup|expect|where):/\n});\n\nPrism.languages.insertBefore('groovy', 'function', {\n\t'annotation': {\n\t\tpattern: /(^|[^.])@\\w+/,\n\t\tlookbehind: true,\n\t\talias: 'punctuation'\n\t}\n});\n\n// Handle string interpolation\nPrism.hooks.add('wrap', function(env) {\n\tif (env.language === 'groovy' && env.type === 'string') {\n\t\tvar delimiter = env.content[0];\n\n\t\tif (delimiter != \"'\") {\n\t\t\tvar pattern = /([^\\\\])(?:\\$(?:\\{.*?\\}|[\\w.]+))/;\n\t\t\tif (delimiter === '$') {\n\t\t\t\tpattern = /([^\\$])(?:\\$(?:\\{.*?\\}|[\\w.]+))/;\n\t\t\t}\n\n\t\t\t// To prevent double HTML-encoding we have to decode env.content first\n\t\t\tenv.content = env.content.replace(/&lt;/g, '<').replace(/&amp;/g, '&');\n\n\t\t\tenv.content = Prism.highlight(env.content, {\n\t\t\t\t'expression': {\n\t\t\t\t\tpattern: pattern,\n\t\t\t\t\tlookbehind: true,\n\t\t\t\t\tinside: Prism.languages.groovy\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tenv.classes.push(delimiter === '/' ? 'regex' : 'gstring');\n\t\t}\n\t}\n});\n"],"sourceRoot":""}